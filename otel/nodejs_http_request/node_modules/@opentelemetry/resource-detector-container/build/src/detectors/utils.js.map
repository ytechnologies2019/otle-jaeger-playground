{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/detectors/utils.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;GAcG;AACU,QAAA,mBAAmB,GAAG,EAAE,CAAC;AACzB,QAAA,sBAAsB,GAAG,mBAAmB,CAAC;AAC7C,QAAA,sBAAsB,GAAG,sBAAsB,CAAC;AAChD,QAAA,YAAY,GAAG,MAAM,CAAC;AACtB,QAAA,QAAQ,GAAG,UAAU,CAAC;AACtB,QAAA,cAAc,GAAG,YAAY,CAAC;AAC9B,QAAA,IAAI,GAAG,OAAO,CAAC;AACf,QAAA,cAAc,GAAG,iBAAiB,CAAC;AACnC,QAAA,MAAM,GAAG,SAAS,CAAC;AACnB,QAAA,gBAAgB,GAAG,cAAc,CAAC;AAE/C,SAAgB,cAAc,CAAC,WAAmB,EAAE,MAAc;IAChE,OAAO,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC9C,CAAC;AAFD,wCAEC;AAED,SAAgB,0BAA0B,CAAC,IAAY;IACrD,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,SAAS,CAAC;KAClB;IACD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;QACxB,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,WAAW,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAEhD,8DAA8D;IAC9D,MAAM,UAAU,GAAG,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAChD,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;QACrB,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;KACrD;IAED,gDAAgD;IAChD,IAAI,WAAW,CAAC,UAAU,CAAC,YAAI,CAAC,EAAE;QAChC,WAAW,GAAG,cAAc,CAAC,WAAW,EAAE,YAAI,CAAC,CAAC;KACjD;SAAM,IAAI,WAAW,CAAC,UAAU,CAAC,cAAM,CAAC,EAAE;QACzC,WAAW,GAAG,cAAc,CAAC,WAAW,EAAE,cAAM,CAAC,CAAC;KACnD;SAAM,IAAI,WAAW,CAAC,UAAU,CAAC,sBAAc,CAAC,EAAE;QACjD,WAAW,GAAG,cAAc,CAAC,WAAW,EAAE,sBAAc,CAAC,CAAC;KAC3D;IACD,yCAAyC;IACzC,IAAI,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC7B,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KACzC;IACD,sDAAsD;IACtD,IAAI,wBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;QACtC,OAAO,WAAW,CAAC;KACpB;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAjCD,gEAiCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const CONTAINER_ID_LENGTH = 64;\nexport const DEFAULT_CGROUP_V1_PATH = '/proc/self/cgroup';\nexport const DEFAULT_CGROUP_V2_PATH = '/proc/self/mountinfo';\nexport const UTF8_UNICODE = 'utf8';\nexport const HOSTNAME = 'hostname';\nexport const MARKING_PREFIX = 'containers';\nexport const CRIO = 'crio-';\nexport const CRI_CONTAINERD = 'cri-containerd-';\nexport const DOCKER = 'docker-';\nexport const HEX_STRING_REGEX = /^[a-f0-9]+$/i;\n\nexport function truncatePrefix(lastSection: string, prefix: string): string {\n  return lastSection.substring(prefix.length);\n}\n\nexport function extractContainerIdFromLine(line: string): string | undefined {\n  if (!line) {\n    return undefined;\n  }\n  const sections = line.split('/');\n  if (sections.length <= 1) {\n    return undefined;\n  }\n  let lastSection = sections[sections.length - 1];\n\n  // Handle containerd v1.5.0+ format with systemd cgroup driver\n  const colonIndex = lastSection.lastIndexOf(':');\n  if (colonIndex !== -1) {\n    lastSection = lastSection.substring(colonIndex + 1);\n  }\n\n  // Truncate known prefixes from the last section\n  if (lastSection.startsWith(CRIO)) {\n    lastSection = truncatePrefix(lastSection, CRIO);\n  } else if (lastSection.startsWith(DOCKER)) {\n    lastSection = truncatePrefix(lastSection, DOCKER);\n  } else if (lastSection.startsWith(CRI_CONTAINERD)) {\n    lastSection = truncatePrefix(lastSection, CRI_CONTAINERD);\n  }\n  // Remove anything after the first period\n  if (lastSection.includes('.')) {\n    lastSection = lastSection.split('.')[0];\n  }\n  // Check if the remaining string is a valid hex string\n  if (HEX_STRING_REGEX.test(lastSection)) {\n    return lastSection;\n  }\n  return undefined;\n}\n"]}