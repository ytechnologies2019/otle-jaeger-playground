{"version":3,"file":"AwsLambdaDetectorSync.js","sourceRoot":"","sources":["../../../src/detectors/AwsLambdaDetectorSync.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,wDAMkC;AAClC,8EAQ6C;AAE7C;;;;GAIG;AACH,MAAa,qBAAqB;IAChC,MAAM,CAAC,OAAiC;QACtC,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC;QAC1D,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,oBAAQ,CAAC,KAAK,EAAE,CAAC;SACzB;QAED,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC;QAChE,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;QAEtC,MAAM,UAAU,GAAuB;YACrC,CAAC,iDAA0B,CAAC,EAAE,MAAM,CAAC,8CAAuB,CAAC;YAC7D,CAAC,iDAA0B,CAAC,EAAE,MAAM,CAAC,qDAA8B,CAAC;SACrE,CAAC;QACF,IAAI,MAAM,EAAE;YACV,UAAU,CAAC,+CAAwB,CAAC,GAAG,MAAM,CAAC;SAC/C;QAED,IAAI,YAAY,EAAE;YAChB,UAAU,CAAC,4CAAqB,CAAC,GAAG,YAAY,CAAC;SAClD;QACD,IAAI,eAAe,EAAE;YACnB,UAAU,CAAC,+CAAwB,CAAC,GAAG,eAAe,CAAC;SACxD;QAED,OAAO,IAAI,oBAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;CACF;AA3BD,sDA2BC;AAEY,QAAA,qBAAqB,GAAG,IAAI,qBAAqB,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DetectorSync,\n  IResource,\n  Resource,\n  ResourceAttributes,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\nimport {\n  SEMRESATTRS_CLOUD_PROVIDER,\n  SEMRESATTRS_CLOUD_PLATFORM,\n  SEMRESATTRS_CLOUD_REGION,\n  SEMRESATTRS_FAAS_VERSION,\n  SEMRESATTRS_FAAS_NAME,\n  CLOUDPROVIDERVALUES_AWS,\n  CLOUDPLATFORMVALUES_AWS_LAMBDA,\n} from '@opentelemetry/semantic-conventions';\n\n/**\n * The AwsLambdaDetector can be used to detect if a process is running in AWS Lambda\n * and return a {@link Resource} populated with data about the environment.\n * Returns an empty Resource if detection fails.\n */\nexport class AwsLambdaDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const functionName = process.env.AWS_LAMBDA_FUNCTION_NAME;\n    if (!functionName) {\n      return Resource.empty();\n    }\n\n    const functionVersion = process.env.AWS_LAMBDA_FUNCTION_VERSION;\n    const region = process.env.AWS_REGION;\n\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_CLOUD_PROVIDER]: String(CLOUDPROVIDERVALUES_AWS),\n      [SEMRESATTRS_CLOUD_PLATFORM]: String(CLOUDPLATFORMVALUES_AWS_LAMBDA),\n    };\n    if (region) {\n      attributes[SEMRESATTRS_CLOUD_REGION] = region;\n    }\n\n    if (functionName) {\n      attributes[SEMRESATTRS_FAAS_NAME] = functionName;\n    }\n    if (functionVersion) {\n      attributes[SEMRESATTRS_FAAS_VERSION] = functionVersion;\n    }\n\n    return new Resource(attributes);\n  }\n}\n\nexport const awsLambdaDetectorSync = new AwsLambdaDetectorSync();\n"]}