{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../src/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ContextManager,\n  TextMapPropagator,\n  metrics,\n  diag,\n  DiagConsoleLogger,\n} from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport {\n  Instrumentation,\n  registerInstrumentations,\n} from '@opentelemetry/instrumentation';\nimport {\n  Detector,\n  DetectorSync,\n  detectResourcesSync,\n  envDetector,\n  hostDetector,\n  IResource,\n  processDetector,\n  Resource,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\nimport {\n  LogRecordProcessor,\n  LoggerProvider,\n  BatchLogRecordProcessor,\n  ConsoleLogRecordExporter,\n  LogRecordExporter,\n  SimpleLogRecordProcessor,\n} from '@opentelemetry/sdk-logs';\nimport { OTLPLogExporter as OTLPHttpLogExporter } from '@opentelemetry/exporter-logs-otlp-http';\nimport { OTLPLogExporter as OTLPGrpcLogExporter } from '@opentelemetry/exporter-logs-otlp-grpc';\nimport { OTLPLogExporter as OTLPProtoLogExporter } from '@opentelemetry/exporter-logs-otlp-proto';\nimport { MeterProvider, MetricReader, View } from '@opentelemetry/sdk-metrics';\nimport {\n  BatchSpanProcessor,\n  SpanProcessor,\n} from '@opentelemetry/sdk-trace-base';\nimport {\n  NodeTracerConfig,\n  NodeTracerProvider,\n} from '@opentelemetry/sdk-trace-node';\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions';\nimport { NodeSDKConfiguration } from './types';\nimport { TracerProviderWithEnvExporters } from './TracerProviderWithEnvExporter';\nimport { getEnv, getEnvWithoutDefaults } from '@opentelemetry/core';\nimport { getResourceDetectorsFromEnv, filterBlanksAndNulls } from './utils';\n\n/** This class represents everything needed to register a fully configured OpenTelemetry Node.js SDK */\n\nexport type MeterProviderConfig = {\n  /**\n   * Reference to the MetricReader instance by the NodeSDK\n   */\n  reader?: MetricReader;\n  /**\n   * List of {@link View}s that should be passed to the MeterProvider\n   */\n  views?: View[];\n};\n\nexport type LoggerProviderConfig = {\n  /**\n   * Reference to the LoggerRecordProcessor instance by the NodeSDK\n   */\n  logRecordProcessors: LogRecordProcessor[];\n};\n\nexport class NodeSDK {\n  private _tracerProviderConfig?: {\n    tracerConfig: NodeTracerConfig;\n    spanProcessors: SpanProcessor[];\n    contextManager?: ContextManager;\n    textMapPropagator?: TextMapPropagator;\n  };\n  private _loggerProviderConfig?: LoggerProviderConfig;\n  private _meterProviderConfig?: MeterProviderConfig;\n  private _instrumentations: Instrumentation[];\n\n  private _resource: IResource;\n  private _resourceDetectors: Array<Detector | DetectorSync>;\n\n  private _autoDetectResources: boolean;\n\n  private _tracerProvider?: NodeTracerProvider | TracerProviderWithEnvExporters;\n  private _loggerProvider?: LoggerProvider;\n  private _meterProvider?: MeterProvider;\n  private _serviceName?: string;\n  private _configuration?: Partial<NodeSDKConfiguration>;\n\n  private _disabled?: boolean;\n\n  /**\n   * Create a new NodeJS SDK instance\n   */\n  public constructor(configuration: Partial<NodeSDKConfiguration> = {}) {\n    const env = getEnv();\n    const envWithoutDefaults = getEnvWithoutDefaults();\n\n    if (env.OTEL_SDK_DISABLED) {\n      this._disabled = true;\n      // Functions with possible side-effects are set\n      // to no-op via the _disabled flag\n    }\n\n    // Default is INFO, use environment without defaults to check\n    // if the user originally set the environment variable.\n    if (envWithoutDefaults.OTEL_LOG_LEVEL) {\n      diag.setLogger(new DiagConsoleLogger(), {\n        logLevel: envWithoutDefaults.OTEL_LOG_LEVEL,\n      });\n    }\n\n    this._configuration = configuration;\n\n    this._resource = configuration.resource ?? new Resource({});\n    this._autoDetectResources = configuration.autoDetectResources ?? true;\n    if (!this._autoDetectResources) {\n      this._resourceDetectors = [];\n    } else if (configuration.resourceDetectors != null) {\n      this._resourceDetectors = configuration.resourceDetectors;\n    } else if (process.env.OTEL_NODE_RESOURCE_DETECTORS != null) {\n      this._resourceDetectors = getResourceDetectorsFromEnv();\n    } else {\n      this._resourceDetectors = [envDetector, processDetector, hostDetector];\n    }\n\n    this._serviceName = configuration.serviceName;\n\n    // If a tracer provider can be created from manual configuration, create it\n    if (\n      configuration.traceExporter ||\n      configuration.spanProcessor ||\n      configuration.spanProcessors\n    ) {\n      const tracerProviderConfig: NodeTracerConfig = {};\n\n      if (configuration.sampler) {\n        tracerProviderConfig.sampler = configuration.sampler;\n      }\n      if (configuration.spanLimits) {\n        tracerProviderConfig.spanLimits = configuration.spanLimits;\n      }\n      if (configuration.idGenerator) {\n        tracerProviderConfig.idGenerator = configuration.idGenerator;\n      }\n\n      if (configuration.spanProcessor) {\n        diag.warn(\n          \"The 'spanProcessor' option is deprecated. Please use 'spanProcessors' instead.\"\n        );\n      }\n\n      const spanProcessor =\n        configuration.spanProcessor ??\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        new BatchSpanProcessor(configuration.traceExporter!);\n\n      const spanProcessors = configuration.spanProcessors ?? [spanProcessor];\n\n      this._tracerProviderConfig = {\n        tracerConfig: tracerProviderConfig,\n        spanProcessors,\n        contextManager: configuration.contextManager,\n        textMapPropagator: configuration.textMapPropagator,\n      };\n    }\n\n    if (configuration.logRecordProcessors) {\n      this._loggerProviderConfig = {\n        logRecordProcessors: configuration.logRecordProcessors,\n      };\n    } else if (configuration.logRecordProcessor) {\n      this._loggerProviderConfig = {\n        logRecordProcessors: [configuration.logRecordProcessor],\n      };\n      diag.warn(\n        \"The 'logRecordProcessor' option is deprecated. Please use 'logRecordProcessors' instead.\"\n      );\n    } else {\n      this.configureLoggerProviderFromEnv();\n    }\n\n    if (configuration.metricReader || configuration.views) {\n      const meterProviderConfig: MeterProviderConfig = {};\n      if (configuration.metricReader) {\n        meterProviderConfig.reader = configuration.metricReader;\n      }\n\n      if (configuration.views) {\n        meterProviderConfig.views = configuration.views;\n      }\n\n      this._meterProviderConfig = meterProviderConfig;\n    }\n\n    this._instrumentations = configuration.instrumentations?.flat() ?? [];\n  }\n\n  /**\n   * Call this method to construct SDK components and register them with the OpenTelemetry API.\n   */\n  public start(): void {\n    if (this._disabled) {\n      return;\n    }\n\n    registerInstrumentations({\n      instrumentations: this._instrumentations,\n    });\n\n    if (this._autoDetectResources) {\n      const internalConfig: ResourceDetectionConfig = {\n        detectors: this._resourceDetectors,\n      };\n\n      this._resource = this._resource.merge(\n        detectResourcesSync(internalConfig)\n      );\n    }\n\n    this._resource =\n      this._serviceName === undefined\n        ? this._resource\n        : this._resource.merge(\n            new Resource({\n              [SEMRESATTRS_SERVICE_NAME]: this._serviceName,\n            })\n          );\n\n    // if there is a tracerProviderConfig (traceExporter/spanProcessor was set manually) or the traceExporter is set manually, use NodeTracerProvider\n    const Provider = this._tracerProviderConfig\n      ? NodeTracerProvider\n      : TracerProviderWithEnvExporters;\n\n    // If the Provider is configured with Env Exporters, we need to check if the SDK had any manual configurations and set them here\n    const tracerProvider = new Provider({\n      ...this._configuration,\n      resource: this._resource,\n    });\n\n    this._tracerProvider = tracerProvider;\n\n    if (this._tracerProviderConfig) {\n      for (const spanProcessor of this._tracerProviderConfig.spanProcessors) {\n        tracerProvider.addSpanProcessor(spanProcessor);\n      }\n    }\n\n    tracerProvider.register({\n      contextManager:\n        this._tracerProviderConfig?.contextManager ??\n        // _tracerProviderConfig may be undefined if trace-specific settings are not provided - fall back to raw config\n        this._configuration?.contextManager,\n      propagator: this._tracerProviderConfig?.textMapPropagator,\n    });\n\n    if (this._loggerProviderConfig) {\n      const loggerProvider = new LoggerProvider({\n        resource: this._resource,\n      });\n\n      for (const logRecordProcessor of this._loggerProviderConfig\n        .logRecordProcessors) {\n        loggerProvider.addLogRecordProcessor(logRecordProcessor);\n      }\n\n      this._loggerProvider = loggerProvider;\n\n      logs.setGlobalLoggerProvider(loggerProvider);\n    }\n\n    if (this._meterProviderConfig) {\n      const readers: MetricReader[] = [];\n      if (this._meterProviderConfig.reader) {\n        readers.push(this._meterProviderConfig.reader);\n      }\n      const meterProvider = new MeterProvider({\n        resource: this._resource,\n        views: this._meterProviderConfig?.views ?? [],\n        readers: readers,\n      });\n\n      this._meterProvider = meterProvider;\n\n      metrics.setGlobalMeterProvider(meterProvider);\n\n      // TODO: This is a workaround to fix https://github.com/open-telemetry/opentelemetry-js/issues/3609\n      // If the MeterProvider is not yet registered when instrumentations are registered, all metrics are dropped.\n      // This code is obsolete once https://github.com/open-telemetry/opentelemetry-js/issues/3622 is implemented.\n      for (const instrumentation of this._instrumentations) {\n        instrumentation.setMeterProvider(metrics.getMeterProvider());\n      }\n    }\n  }\n\n  public shutdown(): Promise<void> {\n    const promises: Promise<unknown>[] = [];\n    if (this._tracerProvider) {\n      promises.push(this._tracerProvider.shutdown());\n    }\n    if (this._loggerProvider) {\n      promises.push(this._loggerProvider.shutdown());\n    }\n    if (this._meterProvider) {\n      promises.push(this._meterProvider.shutdown());\n    }\n\n    return (\n      Promise.all(promises)\n        // return void instead of the array from Promise.all\n        .then(() => {})\n    );\n  }\n\n  private configureLoggerProviderFromEnv(): void {\n    const logExportersList = process.env.OTEL_LOGS_EXPORTER ?? '';\n    const enabledExporters = filterBlanksAndNulls(logExportersList.split(','));\n\n    if (enabledExporters.length === 0) {\n      diag.info('OTEL_LOGS_EXPORTER is empty. Using default otlp exporter.');\n      enabledExporters.push('otlp');\n    }\n\n    if (enabledExporters.includes('none')) {\n      diag.info(\n        `OTEL_LOGS_EXPORTER contains \"none\". Logger provider will not be initialized.`\n      );\n      return;\n    }\n\n    const exporters: LogRecordExporter[] = [];\n\n    enabledExporters.forEach(exporter => {\n      if (exporter === 'otlp') {\n        const protocol = (\n          process.env.OTEL_EXPORTER_OTLP_LOGS_PROTOCOL ??\n          process.env.OTEL_EXPORTER_OTLP_PROTOCOL\n        )?.trim();\n\n        switch (protocol) {\n          case 'grpc':\n            exporters.push(new OTLPGrpcLogExporter());\n            break;\n          case 'http/json':\n            exporters.push(new OTLPHttpLogExporter());\n            break;\n          case 'http/protobuf':\n            exporters.push(new OTLPProtoLogExporter());\n            break;\n          case undefined:\n          case '':\n            exporters.push(new OTLPProtoLogExporter());\n            break;\n          default:\n            diag.warn(\n              `Unsupported OTLP logs protocol: \"${protocol}\". Using http/protobuf.`\n            );\n            exporters.push(new OTLPProtoLogExporter());\n        }\n      } else if (exporter === 'console') {\n        exporters.push(new ConsoleLogRecordExporter());\n      } else {\n        diag.warn(\n          `Unsupported OTEL_LOGS_EXPORTER value: \"${exporter}\". Supported values are: otlp, console, none.`\n        );\n      }\n    });\n\n    if (exporters.length > 0) {\n      this._loggerProviderConfig = {\n        logRecordProcessors: exporters.map(exporter => {\n          if (exporter instanceof ConsoleLogRecordExporter) {\n            return new SimpleLogRecordProcessor(exporter);\n          } else {\n            return new BatchLogRecordProcessor(exporter);\n          }\n        }),\n      };\n    }\n  }\n}\n"]}