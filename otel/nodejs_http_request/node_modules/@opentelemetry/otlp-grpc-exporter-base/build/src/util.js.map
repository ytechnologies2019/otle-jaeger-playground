{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport * as path from 'path';\nimport { URL } from 'url';\nimport * as fs from 'fs';\nimport { CompressionAlgorithm } from '@opentelemetry/otlp-exporter-base';\nimport {\n  createInsecureCredentials,\n  createSslCredentials,\n} from './grpc-exporter-transport';\n\n// NOTE: do not change these type imports to actual imports. Doing so WILL break `@opentelemetry/instrumentation-http`,\n// as they'd be imported before the http/https modules can be wrapped.\nimport type { ChannelCredentials } from '@grpc/grpc-js';\n\nexport const DEFAULT_COLLECTOR_URL = 'http://localhost:4317';\n\nexport function validateAndNormalizeUrl(url: string): string {\n  const hasProtocol = url.match(/^([\\w]{1,8}):\\/\\//);\n  if (!hasProtocol) {\n    url = `https://${url}`;\n  }\n  const target = new URL(url);\n  if (target.protocol === 'unix:') {\n    return url;\n  }\n  if (target.pathname && target.pathname !== '/') {\n    diag.warn(\n      'URL path should not be set when using grpc, the path part of the URL will be ignored.'\n    );\n  }\n  if (target.protocol !== '' && !target.protocol?.match(/^(http)s?:$/)) {\n    diag.warn('URL protocol should be http(s)://. Using http://.');\n  }\n  return target.host;\n}\n\nexport function configureCredentials(\n  credentials: ChannelCredentials | undefined,\n  endpoint: string\n): ChannelCredentials {\n  let insecure: boolean;\n\n  if (credentials) {\n    return credentials;\n  } else if (endpoint.startsWith('https://')) {\n    insecure = false;\n  } else if (\n    endpoint.startsWith('http://') ||\n    endpoint === DEFAULT_COLLECTOR_URL\n  ) {\n    insecure = true;\n  } else {\n    insecure = getSecurityFromEnv();\n  }\n\n  if (insecure) {\n    return createInsecureCredentials();\n  } else {\n    return getCredentialsFromEnvironment();\n  }\n}\n\nfunction getSecurityFromEnv(): boolean {\n  const definedInsecure =\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_INSECURE ||\n    getEnv().OTEL_EXPORTER_OTLP_INSECURE;\n\n  if (definedInsecure) {\n    return definedInsecure.toLowerCase() === 'true';\n  } else {\n    return false;\n  }\n}\n\n/**\n * Exported for testing\n */\nexport function getCredentialsFromEnvironment(): ChannelCredentials {\n  const rootCert = retrieveRootCert();\n  const privateKey = retrievePrivateKey();\n  const certChain = retrieveCertChain();\n\n  return createSslCredentials(rootCert, privateKey, certChain);\n}\n\nfunction retrieveRootCert(): Buffer | undefined {\n  const rootCertificate =\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE ||\n    getEnv().OTEL_EXPORTER_OTLP_CERTIFICATE;\n\n  if (rootCertificate) {\n    try {\n      return fs.readFileSync(path.resolve(process.cwd(), rootCertificate));\n    } catch {\n      diag.warn('Failed to read root certificate file');\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\nfunction retrievePrivateKey(): Buffer | undefined {\n  const clientKey =\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY ||\n    getEnv().OTEL_EXPORTER_OTLP_CLIENT_KEY;\n\n  if (clientKey) {\n    try {\n      return fs.readFileSync(path.resolve(process.cwd(), clientKey));\n    } catch {\n      diag.warn('Failed to read client certificate private key file');\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\nfunction retrieveCertChain(): Buffer | undefined {\n  const clientChain =\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE ||\n    getEnv().OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE;\n\n  if (clientChain) {\n    try {\n      return fs.readFileSync(path.resolve(process.cwd(), clientChain));\n    } catch {\n      diag.warn('Failed to read client certificate chain file');\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\nexport function configureCompression(\n  compression: CompressionAlgorithm | undefined\n): CompressionAlgorithm {\n  if (compression != null) {\n    return compression;\n  }\n\n  const envCompression =\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_COMPRESSION ||\n    getEnv().OTEL_EXPORTER_OTLP_COMPRESSION;\n\n  if (envCompression === 'gzip') {\n    return CompressionAlgorithm.GZIP;\n  } else if (envCompression === 'none') {\n    return CompressionAlgorithm.NONE;\n  }\n\n  diag.warn(\n    'Unknown compression \"' + envCompression + '\", falling back to \"none\"'\n  );\n  return CompressionAlgorithm.NONE;\n}\n"]}