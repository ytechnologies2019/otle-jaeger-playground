{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../src/instrumentation.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  diag,\n  trace,\n  isSpanContextValid,\n  Span,\n} from '@opentelemetry/api';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport { PinoInstrumentationConfig } from './types';\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport { getTimeConverter, OTelPinoStream } from './log-sending-utils';\n\nconst pinoVersions = ['>=5.14.0 <10'];\n\nconst DEFAULT_LOG_KEYS = {\n  traceId: 'trace_id',\n  spanId: 'span_id',\n  traceFlags: 'trace_flags',\n};\n\nexport class PinoInstrumentation extends InstrumentationBase<PinoInstrumentationConfig> {\n  constructor(config: PinoInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  protected init() {\n    return [\n      new InstrumentationNodeModuleDefinition('pino', pinoVersions, module => {\n        const isESM = module[Symbol.toStringTag] === 'Module';\n        const moduleExports = isESM ? module.default : module;\n        const instrumentation = this;\n\n        const patchedPino = Object.assign((...args: unknown[]) => {\n          const config = instrumentation.getConfig();\n          const isEnabled = instrumentation.isEnabled();\n\n          const logger = moduleExports(...args);\n\n          // Setup \"log correlation\" -- injection of `trace_id` et al fields.\n          // Note: If the Pino logger is configured with `nestedKey`, then\n          // the `trace_id` et al fields added by `otelMixin` will be nested\n          // as well. https://getpino.io/#/docs/api?id=mixin-function\n          const otelMixin = instrumentation._getMixinFunction();\n          const mixinSym = moduleExports.symbols.mixinSym;\n          const origMixin = logger[mixinSym];\n          if (origMixin === undefined) {\n            logger[mixinSym] = otelMixin;\n          } else {\n            logger[mixinSym] = (ctx: object, level: number) => {\n              return Object.assign(\n                otelMixin(ctx, level),\n                origMixin(ctx, level)\n              );\n            };\n          }\n\n          // Setup \"log sending\" -- sending log records to the Logs API.\n          // This depends on `pino.multistream`, which was added in v7.0.0.\n          if (\n            isEnabled &&\n            !config.disableLogSending &&\n            typeof moduleExports.multistream === 'function'\n          ) {\n            const otelTimestampFromTime = getTimeConverter(\n              logger,\n              moduleExports\n            );\n            const otelStream = new OTelPinoStream({\n              messageKey: logger[moduleExports.symbols.messageKeySym],\n              levels: logger.levels,\n              otelTimestampFromTime,\n            });\n            (otelStream as any)[Symbol.for('pino.metadata')] = true; // for `stream.lastLevel`\n\n            // An error typically indicates a Pino bug, or logger configuration\n            // bug. `diag.warn` *once* for the first error on the assumption\n            // subsequent ones stem from the same bug.\n            otelStream.once('unknown', (line, err) => {\n              instrumentation._diag.warn(\n                'could not send pino log line (will only log first occurrence)',\n                { line, err }\n              );\n            });\n\n            // Use pino's own `multistream` to send to the original stream and\n            // to the OTel Logs API/SDK.\n            // https://getpino.io/#/docs/api?id=pinomultistreamstreamsarray-opts-gt-multistreamres\n            const origStream = logger[moduleExports.symbols.streamSym];\n            logger[moduleExports.symbols.streamSym] = moduleExports.multistream(\n              [\n                { level: logger.level, stream: origStream },\n                { level: logger.level, stream: otelStream },\n              ],\n              { levels: logger.levels.values }\n            );\n          }\n\n          return logger;\n        }, moduleExports);\n\n        if (typeof patchedPino.pino === 'function') {\n          patchedPino.pino = patchedPino;\n        }\n        if (typeof patchedPino.default === 'function') {\n          patchedPino.default = patchedPino;\n        }\n        /* istanbul ignore if */\n        if (isESM) {\n          if (module.pino) {\n            // This was added in pino@6.8.0 (https://github.com/pinojs/pino/pull/936).\n            module.pino = patchedPino;\n          }\n          module.default = patchedPino;\n        }\n\n        return patchedPino;\n      }),\n    ];\n  }\n\n  private _callHook(span: Span, record: Record<string, string>, level: number) {\n    const { logHook } = this.getConfig();\n\n    if (!logHook) {\n      return;\n    }\n\n    safeExecuteInTheMiddle(\n      () => logHook(span, record, level),\n      err => {\n        if (err) {\n          diag.error('pino instrumentation: error calling logHook', err);\n        }\n      },\n      true\n    );\n  }\n\n  private _getMixinFunction() {\n    const instrumentation = this;\n    return function otelMixin(_context: object, level: number) {\n      if (\n        !instrumentation.isEnabled() ||\n        instrumentation.getConfig().disableLogCorrelation\n      ) {\n        return {};\n      }\n\n      const span = trace.getSpan(context.active());\n\n      if (!span) {\n        return {};\n      }\n\n      const spanContext = span.spanContext();\n\n      if (!isSpanContextValid(spanContext)) {\n        return {};\n      }\n\n      const logKeys = instrumentation.getConfig().logKeys ?? DEFAULT_LOG_KEYS;\n\n      const record = {\n        [logKeys.traceId]: spanContext.traceId,\n        [logKeys.spanId]: spanContext.spanId,\n        [logKeys.traceFlags]: `0${spanContext.traceFlags.toString(16)}`,\n      };\n\n      instrumentation._callHook(span, record, level);\n\n      return record;\n    };\n  }\n}\n"]}