{"version":3,"file":"AzureVmDetector.js","sourceRoot":"","sources":["../../../src/detectors/AzureVmDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as http from 'http';\n\nimport { context } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport {\n  DetectorSync,\n  IResource,\n  Resource,\n  ResourceAttributes,\n} from '@opentelemetry/resources';\nimport {\n  CLOUDPLATFORMVALUES_AZURE_VM,\n  CLOUDPROVIDERVALUES_AZURE,\n  SEMRESATTRS_CLOUD_PLATFORM,\n  SEMRESATTRS_CLOUD_PROVIDER,\n  SEMRESATTRS_CLOUD_REGION,\n  SEMRESATTRS_HOST_ID,\n  SEMRESATTRS_HOST_NAME,\n  SEMRESATTRS_HOST_TYPE,\n  SEMRESATTRS_OS_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE,\n  AZURE_VM_METADATA_HOST,\n  AZURE_VM_METADATA_PATH,\n  AZURE_VM_SCALE_SET_NAME_ATTRIBUTE,\n  AZURE_VM_SKU_ATTRIBUTE,\n  AzureVmMetadata,\n} from '../types';\n\n/**\n * The AzureVmDetector can be used to detect if a process is running in an Azure VM.\n * @returns a {@link Resource} populated with data about the environment or an empty Resource if detection fails.\n */\nclass AzureVmResourceDetector implements DetectorSync {\n  detect(): IResource {\n    const attributes = context.with(suppressTracing(context.active()), () =>\n      this.getAzureVmMetadata()\n    );\n    return new Resource({}, attributes);\n  }\n\n  async getAzureVmMetadata(): Promise<ResourceAttributes> {\n    const options = {\n      host: AZURE_VM_METADATA_HOST,\n      path: AZURE_VM_METADATA_PATH,\n      method: 'GET',\n      timeout: 5000,\n      headers: {\n        Metadata: 'True',\n      },\n    };\n    const metadata: AzureVmMetadata = await new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        req.destroy();\n        reject(new Error('Azure metadata service request timed out.'));\n      }, 1000);\n\n      const req = http.request(options, res => {\n        clearTimeout(timeoutId);\n        const { statusCode } = res;\n        res.setEncoding('utf8');\n        let rawData = '';\n        res.on('data', chunk => (rawData += chunk));\n        res.on('end', () => {\n          if (statusCode && statusCode >= 200 && statusCode < 300) {\n            try {\n              resolve(JSON.parse(rawData));\n            } catch (error) {\n              reject(error);\n            }\n          } else {\n            reject(\n              new Error('Failed to load page, status code: ' + statusCode)\n            );\n          }\n        });\n      });\n      req.on('error', err => {\n        clearTimeout(timeoutId);\n        reject(err);\n      });\n      req.end();\n    });\n\n    const attributes = {\n      [AZURE_VM_SCALE_SET_NAME_ATTRIBUTE]: metadata['vmScaleSetName'],\n      [AZURE_VM_SKU_ATTRIBUTE]: metadata['sku'],\n      [SEMRESATTRS_CLOUD_PLATFORM]: CLOUDPLATFORMVALUES_AZURE_VM,\n      [SEMRESATTRS_CLOUD_PROVIDER]: CLOUDPROVIDERVALUES_AZURE,\n      [SEMRESATTRS_CLOUD_REGION]: metadata['location'],\n      [CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE]: metadata['resourceId'],\n      [SEMRESATTRS_HOST_ID]: metadata['vmId'],\n      [SEMRESATTRS_HOST_NAME]: metadata['name'],\n      [SEMRESATTRS_HOST_TYPE]: metadata['vmSize'],\n      [SEMRESATTRS_OS_VERSION]: metadata['version'],\n    };\n    return attributes;\n  }\n}\n\nexport const azureVmDetector = new AzureVmResourceDetector();\n"]}